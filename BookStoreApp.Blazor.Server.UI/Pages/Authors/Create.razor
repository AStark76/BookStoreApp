@page "/authors/create/"
@using Microsoft.AspNetCore.Identity
@inject IAuthorService authorService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = Roles.Administrator)]

<h3>Create new author</h3>
<EditForm Model="Author" OnValidSubmit="HandleCreateAuthor">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="firstname">First name</label>
        <InputText @bind-Value="@Author.FirstName" class="form-control" id="firstname" />
        <ValidationMessage For="@(()=> Author.FirstName)"></ValidationMessage>
    </div>
    <br />
    <div class="form-group">
        <label for="lastname">Last name</label>
        <InputText @bind-Value="@Author.LastName" class="form-control" id="lastname" />
        <ValidationMessage For="@(()=> Author.LastName)"></ValidationMessage>
    </div>
    <br />
    <div class="form-group">
        <label for="bio">Biography</label>
        <InputText @bind-Value="@Author.Bio" class="form-control" id="bio" />
        <ValidationMessage For="@(()=> Author.Bio)"></ValidationMessage>
    </div>
    <AuthorizeView Roles="Administrator">
        <br />
        <button class="btn btn-primary" type="submit">
            <span class="oi oi-pencil">  </span>
            Create Author
        </button>
    </AuthorizeView>
    <br />
    <button class="btn btn-secondary" @onclick="BackToList">
        <span class="oi oi-media-skip-backward">  </span>
        Back to List
    </button>
</EditForm>


@code {
    private AuthorCreateDto Author = new AuthorCreateDto();

    private async Task HandleCreateAuthor()
    {
        var response = await authorService.CreateAuthor(Author);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navigationManager.NavigateTo("/authors/");
    }

}
